
# exit 1

RSYNCOPTIONS=-auv
# MOREOPTIONS="--append --delete"
MOREOPTIONS="--delete"

if [ -e /etc/hostname ]; then 
	THISHOST=$(cat /etc/hostname)
else
	echo Cannot reliably identify this host \(no /etc/hostname\)
	exit 2
fi 
# BACKUPHOST="localhost:"
BACKUPHOST=""

# BACKUPDIR=/data/backup/$THISHOST
# BACKUPMOUNTPOINT=/bigger
BACKUPMOUNTPOINT=/media/Passport1
BACKUPROOT=${BACKUPMOUNTPOINT}/backup
BACKUPDIR=${BACKUPROOT}/${THISHOST}
BACKUPPLACE=${BACKUPHOST}${BACKUPDIR}
BACKUPLOG=/tmp/backup_`date "+%Y%m%d%H%M"`

# Ensure that BACKUPDIR is mounted on the BACKUPHOST
if [ ! "` mount | grep ${BACKUPMOUNTPOINT} `" -o ! -e "${BACKUPROOT}" ] ; then
	echo Ensure a backup drive is mounted on \"$BACKUPMOUNTPOINT\" 
	echo and \"${BACKUPROOT}\" exists
	exit 1 
fi


if [ -z "$THISHOST" -o "$THISHOST" = "localhost" ]; then
	echo Bad host name \($THISHOST\). Set /etc/hostname
else
	{
	echo "-----------------------------------------------"
	echo Backing up to $BACKUPPLACE
	date
#	time rsync $RSYNCOPTIONS --exclude-from=/backup_exclude \
#		/ $BACKUPPLACE &&
	time rsync $RSYNCOPTIONS $MOREOPTIONS \
		--exclude-from=/backup_exclude / $BACKUPPLACE &&
		[ ! `echo $RSYNCOPTIONS|grep n` ] &&
			( touch $BACKUPDIR/backup_completed
			  echo $BACKUPPLACE `date` > /last_backup )
		# ssh ${BACKUPHOST%:} touch $BACKUPDIR/backup_completed
	date
	echo "###############################################" 
	} | tee ${BACKUPLOG}.log 2>&1 

	find ${BACKUPPLACE} -ls | sed "s=${BACKUPPLACE}/==" > $BACKUPLOG.list
	mv ${BACKUPLOG}.list ${BACKUPPLACE}
fi

# vi: se nowrap tw=0 :

